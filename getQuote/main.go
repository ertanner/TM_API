package main

import (
	"bytes"
	"encoding/json"
	"flag"
	"fmt"
	"io/ioutil"
	"net/http"
	"strconv"
	"strings"
	"time"
)

var repeats = flag.Int("r", 1, "number of repeats")
var timeDelay = flag.Int("d", 0, "time delay in milli seconds per bill")

func main() {

	flag.Parse()

	ch := make(chan string)
	start := time.Now()
	for i := 0; i < *repeats; i++ {
		fmt.Println(i)
		go getQuote(i, ch)
		time.Sleep(time.Duration(*timeDelay) * time.Millisecond)
		fmt.Println(time.Since(start))
	}
	for i := 0; i < *repeats; i++ {
		fmt.Println(<-ch)
	}
	fmt.Printf("%.2fs elapsed\n", time.Since(start).Seconds())
}

func getQuote(count int, ch chan<- string) {
	startQTime := time.Now()
	type AutoGenerated struct {
		DyltRateQuoteReq struct {
			ShipperInfo struct {
				CustomerAddress struct {
					City  string `json:"city"`
					State string `json:"state"`
					Zip   string `json:"zip"`
				} `json:"customerAddress"`
			} `json:"shipperInfo"`
			ConsigneeInfo struct {
				CustomerAddress struct {
					City  string `json:"city"`
					State string `json:"state"`
					Zip   string `json:"zip"`
				} `json:"customerAddress"`
			} `json:"consigneeInfo"`
			Items struct {
				Item []struct {
					Description string `json:"description"`
					NmfcNumber  string `json:"nmfcNumber"`
					Pcs         string `json:"pcs"`
					Weight      string `json:"weight"`
					ActualClass string `json:"actualClass"`
				} `json:"item"`
			} `json:"items"`
			AccountNumber string `json:"accountNumber"`
			UserName      string `json:"userName"`
			Password      string `json:"password"`
			BillTerms     string `json:"billTerms"`
			ServiceType   string `json:"serviceType"`
		} `json:"dyltRateQuoteReq"`
	}

	jsonData, err := ioutil.ReadFile("./rateQuote_test.json")
	if err != nil {
		panic(err.Error())
	}

	var jsonFile AutoGenerated
	err = json.Unmarshal(jsonData, &jsonFile)
	if err != nil {
		panic(err.Error())
	}

	jsonValue, _ := json.Marshal(jsonFile)

	token := getToken()
	request, _ := http.NewRequest("POST", "https://test-api.dylt.com/rateQuote", bytes.NewBuffer(jsonValue))
	request.Header.Set("Content-Type", "application/json")
	request.Header.Set("Authorization", "Bearer "+token)
	client := &http.Client{}
	response, err := client.Do(request)
	if err != nil {
		fmt.Printf("The HTTP request failed with error %s\n", err)
	} else {
		data, _ := ioutil.ReadAll(response.Body)
		fmt.Println(string(data))
	}
	secs := time.Since(startQTime).Seconds()
	fmt.Println("Fuction Time: " + strconv.FormatFloat(secs, 'f', -1, 64))
	//fmt.Println("response Status:", response.Status)
	body, _ := ioutil.ReadAll(response.Body)
	ch <- fmt.Sprintf("%.2f elapsed with response length: %d ", secs, len(body))
}

func getToken() string {
	//Consumer Key: x5Vxusddiy2pYqwpZytwxqkG0lW7Z6a5
	//Consumer Secret: ThzO25vxF0RDuA2U
	body := strings.NewReader(`client_secret=ThzO25vxF0RDuA2U&grant_type=client_credentials&client_id=x5Vxusddiy2pYqwpZytwxqkG0lW7Z6a5`)
	req, err := http.NewRequest("POST", "https://api.dylt.com/oauth/client_credential/accesstoken?grant_type=client_credentials", body)
	if err != nil {
		// handle err
	}
	req.Header.Set("Content-Type", "application/x-www-form-urlencoded")
	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		// handle err
	}
	token, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		panic(err.Error())
	}
	var data map[string]string
	json.Unmarshal(token, &data)
	//fmt.Println(data)
	//fmt.Println(data["access_token"])
	return data["access_token"]
}
